package com.ambition.supplier.manager.web;

import java.util.Date;

import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.ParentPackage;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.factory.annotation.Autowired;

import com.ambition.supplier.entity.ProductExploitationRecord;
import com.ambition.supplier.manager.service.ProductExploitationRecordManager;
import com.ambition.util.common.CommonUtil;
import com.norteksoft.acs.base.utils.log.LogUtilDao;
import com.norteksoft.product.api.ApiFactory;
import com.norteksoft.product.orm.Page;
import com.norteksoft.product.util.ContextUtils;
import com.norteksoft.product.util.ExcelExporter;
import com.norteksoft.product.util.PageUtils;
import com.norteksoft.product.web.struts2.CrudActionSupport;

/**
 * 供应商产品开发记录
 * @author 赵骏
 *
 */
@Namespace("/supplier/product-exploitation")
@ParentPackage("default")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "/supplier/product-exploitation", type = "redirectAction") })
public class ProductExploitationRecordAction extends CrudActionSupport<ProductExploitationRecord> {
	private static final long serialVersionUID = 1L;
	private Long id;
	private String deleteIds;
	private Page<ProductExploitationRecord> page;
	
	private ProductExploitationRecord productExploitationRecord;
	
	@Autowired
	private LogUtilDao logUtilDao;
	
	@Autowired
	private ProductExploitationRecordManager productExploitationRecordManager;
	
	public ProductExploitationRecord getProductExploitationRecord() {
		return productExploitationRecord;
	}
	public void setProductExploitationRecord(
			ProductExploitationRecord productExploitationRecord) {
		this.productExploitationRecord = productExploitationRecord;
	}
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getDeleteIds() {
		return deleteIds;
	}
	public void setDeleteIds(String deleteIds) {
		this.deleteIds = deleteIds;
	}
	
	public Page<ProductExploitationRecord> getPage() {
		return page;
	}
	public void setPage(Page<ProductExploitationRecord> page) {
		this.page = page;
	}
	@Override
	public ProductExploitationRecord getModel() {
		return productExploitationRecord;
	}
	@Override
	protected void prepareModel() throws Exception {
		if(id==null){
			productExploitationRecord = new ProductExploitationRecord();
			productExploitationRecord.setCreatedTime(new Date());
			productExploitationRecord.setCompanyId(ContextUtils.getCompanyId());
			productExploitationRecord.setCreator(ContextUtils.getUserName());
			productExploitationRecord.setLastModifiedTime(new Date());
			productExploitationRecord.setLastModifier(ContextUtils.getUserName());
			productExploitationRecord.setBusinessUnitName(ContextUtils.getSubCompanyName());
			productExploitationRecord.setBusinessUnitCode(CommonUtil.getBusinessUnitCode(ContextUtils.getCompanyName()));
		}else{
			productExploitationRecord = productExploitationRecordManager.getProductExploitationRecord(id);
		}
	}
	@Override
	public String input() throws Exception {
		return SUCCESS;
	}
	@Action("save")
	@Override
	public String save() throws Exception {
		return null;
	}
	@Action("delete")
	@Override
	public String delete() throws Exception {
		return null;
	}
	@Action("list")
	@Override
	public String list() throws Exception {
		return SUCCESS;
	}
	/**
	 * 供应商开发状态
	 */
	@Action("list-datas")
	public String getStateListDatas() throws Exception {
		try{
			page = productExploitationRecordManager.search(page);
			renderText(PageUtils.pageToJson(page));
		}catch (Exception e) {
			e.printStackTrace();
		}
		logUtilDao.debugLog("查询", "供应商管理：供应商管理-供应商开发状态查询");
		return null;
	}
	/**
	  * 方法名: 让步通过
	  * <p>功能说明：物料让步通过</p>
	  * @return
	  * @throws Exception
	 */
	@Action("concession-pass")
	public String concessionPass() throws Exception {
		ProductExploitationRecord record = productExploitationRecordManager.getProductExploitationRecord(id);
		JSONObject result = new JSONObject();
		result.put("error",true);
		if(record == null){
			result.put("message","找不到对应的开发记录!");
		}else{
			String str = productExploitationRecordManager.concessionPass(record);
			if(StringUtils.isEmpty(str)){
				result.put("error",false);
			}else{
				result.put("message",str);
			}
		}
		renderText(result.toString());
		return null;
	}
	
	/**
	 * 导出
	 * @return
	 * @throws Exception 
	 */
	@Action("exports")
	public String exports() throws Exception {
		page = productExploitationRecordManager.search(new Page<ProductExploitationRecord>(Integer.MAX_VALUE));
		ExcelExporter.export(ApiFactory.getMmsService().getExportData(page, "SUPPLIER_PRODUCT_EXPLOITATION_RECORD"),"供应商开发状态");
		logUtilDao.debugLog("导出", "供应商质量管理：供应商管理-供应商开发状态查询");
		return null;
	}
	
	
}
