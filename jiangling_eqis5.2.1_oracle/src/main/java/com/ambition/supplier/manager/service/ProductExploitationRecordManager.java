package com.ambition.supplier.manager.service;

import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.hibernate.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ambition.carmfg.bom.service.ProductBomManager;
import com.ambition.carmfg.entity.ProductBom;
import com.ambition.supplier.admittance.dao.AppraisalReportDao;
import com.ambition.supplier.entity.AppraisalReport;
import com.ambition.supplier.entity.InspectionReport;
import com.ambition.supplier.entity.ProductAdmittanceRecord;
import com.ambition.supplier.entity.ProductExploitationRecord;
import com.ambition.supplier.entity.Supplier;
import com.ambition.supplier.entity.SupplyProduct;
import com.ambition.supplier.manager.dao.ProductExploitationRecordDao;
import com.norteksoft.product.orm.Page;
import com.norteksoft.product.util.ContextUtils;

/**
 * 供应商开发状态Manager
 * @author 赵骏
 *
 */
@Service
@Transactional
public class ProductExploitationRecordManager {
	@Autowired
	private ProductExploitationRecordDao productExploitationRecordDao;
	@Autowired
	private AppraisalReportDao appraisalReportDao;
	@Autowired
	private ProductBomManager productBomManager;
	
	public ProductExploitationRecord getProductExploitationRecord(Long id){
		return productExploitationRecordDao.get(id);
	}
	
	/**
	 * 查询供应商开发状态
	 * @param page
	 * @return
	 */
	public Page<ProductExploitationRecord> search(Page<ProductExploitationRecord> page){
		return productExploitationRecordDao.search(page);
	}
	
	/**
	 * 根据供应商和物料号获取开发记录
	 * @param supplier
	 * @param bomCode
	 * @return
	 */
	public ProductExploitationRecord getProductApplyStateBySupplierAndProductBom(Supplier supplier,String bomCode){
		String hql = "from ProductExploitationRecord p where p.supplier = ? and p.code = ? order by p.createdTime desc";
		List<ProductExploitationRecord> list = productExploitationRecordDao.find(hql,supplier,bomCode);
		if(list.isEmpty()){
			hql = "from ProductExploitationRecord p where p.supplier = ? order by p.createdTime desc";
			list = productExploitationRecordDao.find(hql,supplier);
		}
		if(list.isEmpty()){
			return null;
		}else{
			return list.get(0);
		}
	}
	
	/**
	 * 根据供应商和物料号获取开发记录
	 * @param supplier
	 * @param bomCode
	 * @return
	 */
	public List<ProductExploitationRecord> getProductApplyStateBySupplierAndProductBomList(Supplier supplier,String bomCode){
		String hql = "from ProductExploitationRecord p where p.supplier = ? and p.code like '%"+bomCode+"%'  and p.applyState='已准入' order by p.createdTime desc";
		List<ProductExploitationRecord> list = productExploitationRecordDao.find(hql,supplier);
        return list; 
	}
	
	@SuppressWarnings("unchecked")
	public void updateApplyStateBySupplier(Supplier supplier){
		String hql = "from ProductExploitationRecord p where p.supplier = ?";
		List<ProductExploitationRecord> productExploitationRecords = productExploitationRecordDao.createQuery(hql,supplier).list();
		if(productExploitationRecords.isEmpty()){
			updateApplyStateBySupplierAndProductBom(supplier,null);
		}else{
			for(ProductExploitationRecord productExploitationRecord : productExploitationRecords){
				updateApplyStateBySupplierAndProductBom(supplier,productExploitationRecord.getCode());
			}
		}
	}
	/**
	 * 根据供应商和物料更新对应的物料状态
	 * @param supplier
	 * @param bomCode
	 */
	@SuppressWarnings("unchecked")
	public void updateApplyStateBySupplierAndProductBom(Supplier supplier,String bomCode){
		//获取对应的开发记录
		ProductExploitationRecord productExploitationRecord = getProductApplyStateBySupplierAndProductBom(supplier, bomCode);
		if(productExploitationRecord != null && productExploitationRecord.getCode() != null && StringUtils.isNotEmpty(bomCode)&&!bomCode.equals(productExploitationRecord.getCode())){
			productExploitationRecord = null;
		}
		if(productExploitationRecord != null){
			productExploitationRecord.setInspectionEndDate(null);
			productExploitationRecord.setInspectionStartDate(null);
			productExploitationRecord.setInspectionReportId(null);
			productExploitationRecord.setInspectionResult(null);

			productExploitationRecord.setSampleAppraisalEndDate(null);
			productExploitationRecord.setSampleAppraisalStartDate(null);
			productExploitationRecord.setSampleAppraisalId(null);
			productExploitationRecord.setSampleAppraisalResult(null);

			productExploitationRecord.setFirstBatchEndDate(null);
			productExploitationRecord.setFirstBatchStartDate(null);
			productExploitationRecord.setFirstBatchId(null);
			productExploitationRecord.setFirstBatchResult(null);

			productExploitationRecord.setSecondBatchEndDate(null);
			productExploitationRecord.setSecondBatchStartDate(null);
			productExploitationRecord.setSecondBatchId(null);
			productExploitationRecord.setSecondBatchResult(null);

			productExploitationRecord.setThirdBatchEndDate(null);
			productExploitationRecord.setThirdBatchStartDate(null);
			productExploitationRecord.setThirdBatchId(null);
			productExploitationRecord.setThirdBatchResult(null);
			
			productExploitationRecord.setAdmissionDate(null);
		}else{
			productExploitationRecord = new ProductExploitationRecord();
			productExploitationRecord.setSupplier(supplier);
			productExploitationRecord.setCompanyId(ContextUtils.getCompanyId());
			productExploitationRecord.setCreatedTime(new Date());
			productExploitationRecord.setCreator(ContextUtils.getUserName());
			productExploitationRecord.setLastModifiedTime(new Date());
			productExploitationRecord.setLastModifier(ContextUtils.getUserName());
		}
		if(bomCode != null && productExploitationRecord.getCode() == null){
			ProductBom productBom = productBomManager.getProductBomByBomCode(bomCode);
			if(productBom == null){
				productExploitationRecord.setCode(bomCode);
			}else{
				productExploitationRecord.setCode(productBom.getMaterielCode());
				productExploitationRecord.setName(productBom.getMaterielName());
				productExploitationRecord.setMaterialType(productBom.getMaterialType());
				productExploitationRecord.setImportance(productBom.getImportance());
				productExploitationRecord.setRemark(productBom.getRemark());
			}
		}
		String applyState = null,exploitationPhase=null;
		if(bomCode != null){
			//检查是否已经准入
			String hql = "from ProductAdmittanceRecord p where p.supplier = ? and p.code = ?";
			List<ProductAdmittanceRecord> productAdmittanceRecords = productExploitationRecordDao.createQuery(hql,supplier,bomCode).list();
			if(!productAdmittanceRecords.isEmpty()){
				applyState = SupplyProduct.APPLYSTATE_ADMITTANCE;
				exploitationPhase = ProductExploitationRecord.PHASE_ADMITTANCE;
				productExploitationRecord.setAdmissionDate(productAdmittanceRecords.get(0).getAdmissionDate());
			}
			//检查是否有小批鉴定记录
			hql = "from AppraisalReport a where a.type = ? and a.supplier = ? and a.bomCodes = ? order by a.timeOfPhase desc";
			Query query = productExploitationRecordDao.createQuery(hql,AppraisalReport.TYPE_SUBLOTS,supplier,bomCode);
			List<AppraisalReport> appraisalReports = query.list();
			boolean setThird = false;
			for(AppraisalReport appraisalReport : appraisalReports){
				if(appraisalReport.getTimeOfPhase()>=3){//当大于第三次时认为是第三次
					if(setThird){
						continue;
					}
					setThird = true;
					productExploitationRecord.setThirdBatchStartDate(appraisalReport.getReportDate());
					productExploitationRecord.setThirdBatchId(appraisalReport.getId());
					productExploitationRecord.setIsThirdBatchConcessionPass(appraisalReport.getIsConcessionPass());
					if(AppraisalReport.STATE_PASS.equals(appraisalReport.getAppraisalState())){
						productExploitationRecord.setThirdBatchEndDate(appraisalReport.getAuditDate());
						if(AppraisalReport.RESULT_FAIL.equals(appraisalReport.getAppraisalResult())){
							if(applyState == null){
								applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTSFAIL;
							}
							productExploitationRecord.setThirdBatchResult(AppraisalReport.RESULT_FAIL);
						}else{
							if(applyState == null){
								applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTSPASS;
							}
							productExploitationRecord.setThirdBatchResult(AppraisalReport.RESULT_PASS);
						}
					}else if(AppraisalReport.STATE_FAIL.equals(appraisalReport.getAppraisalState())){
						productExploitationRecord.setThirdBatchEndDate(appraisalReport.getAuditDate());
						if(applyState == null){
							applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTSFAIL;
						}
						productExploitationRecord.setThirdBatchResult(AppraisalReport.RESULT_FAIL);
					}else{
						if(applyState == null){
							applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTS;
						}
						productExploitationRecord.setThirdBatchResult(null);
					}
					if(exploitationPhase==null){
						exploitationPhase = ProductExploitationRecord.PHASE_APPRAISAL_THIRDSUBLOTS;
					}
				}else if(appraisalReport.getTimeOfPhase() == 2){
					productExploitationRecord.setSecondBatchStartDate(appraisalReport.getReportDate());
					productExploitationRecord.setSecondBatchId(appraisalReport.getId());
					productExploitationRecord.setIsSecondBatchConcessionPass(appraisalReport.getIsConcessionPass());
					if(AppraisalReport.STATE_PASS.equals(appraisalReport.getAppraisalState())){
						productExploitationRecord.setSecondBatchEndDate(appraisalReport.getAuditDate());
						if(AppraisalReport.RESULT_FAIL.equals(appraisalReport.getAppraisalResult())){
							if(applyState == null){
								applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTSFAIL;
							}
							productExploitationRecord.setSecondBatchResult(AppraisalReport.RESULT_FAIL);
						}else{
							if(applyState == null){
								applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTSPASS;
							}
							productExploitationRecord.setSecondBatchResult(AppraisalReport.RESULT_PASS);
						}
					}else if(AppraisalReport.STATE_FAIL.equals(appraisalReport.getAppraisalState())){
						productExploitationRecord.setSecondBatchEndDate(appraisalReport.getAuditDate());
						if(applyState == null){
							applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTSFAIL;
						}
						productExploitationRecord.setSecondBatchResult(AppraisalReport.RESULT_FAIL);
					}else{
						if(applyState == null){
							applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTS;
						}
						productExploitationRecord.setSecondBatchResult(null);
					}
					if(exploitationPhase==null){
						exploitationPhase = ProductExploitationRecord.PHASE_APPRAISAL_SECONDSUBLOTS;
					}
				}else{
					productExploitationRecord.setFirstBatchStartDate(appraisalReport.getReportDate());
					productExploitationRecord.setFirstBatchId(appraisalReport.getId());
					productExploitationRecord.setIsFirstBatchConcessionPass(appraisalReport.getIsConcessionPass());
					if(AppraisalReport.STATE_PASS.equals(appraisalReport.getAppraisalState())){
						productExploitationRecord.setFirstBatchEndDate(appraisalReport.getAuditDate());
						if(AppraisalReport.RESULT_FAIL.equals(appraisalReport.getAppraisalResult())){
							if(applyState == null){
								applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTSFAIL;
							}
							productExploitationRecord.setFirstBatchResult(AppraisalReport.RESULT_FAIL);
						}else{
							if(applyState == null){
								applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTSPASS;
							}
							productExploitationRecord.setFirstBatchResult(AppraisalReport.RESULT_PASS);
						}
					}else if(AppraisalReport.STATE_FAIL.equals(appraisalReport.getAppraisalState())){
						productExploitationRecord.setFirstBatchEndDate(appraisalReport.getAuditDate());
						if(applyState == null){
							applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTSFAIL;
						}
						productExploitationRecord.setFirstBatchResult(AppraisalReport.RESULT_FAIL);
					}else{
						if(applyState == null){
							applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTS;
						}
						productExploitationRecord.setFirstBatchResult(null);
					}
					if(exploitationPhase==null){
						exploitationPhase = ProductExploitationRecord.PHASE_APPRAISAL_FIRSTSUBLOTS;
					}
				}
			}
			
			//设置样件鉴定的结果
			hql = "from AppraisalReport a where a.type = ? and a.supplier = ? and a.bomCodes = ? order by a.reportDate desc";
			query = productExploitationRecordDao.createQuery(hql,AppraisalReport.TYPE_SAMPLE,supplier,bomCode);
			query.setMaxResults(1);
			query.setFirstResult(0);
			appraisalReports = query.list();
			for(AppraisalReport appraisalReport : appraisalReports){
				productExploitationRecord.setSampleAppraisalStartDate(appraisalReport.getReportDate());
				productExploitationRecord.setSampleAppraisalId(appraisalReport.getId());
				productExploitationRecord.setIsSampleConcessionPass(appraisalReport.getIsConcessionPass());
				if(AppraisalReport.STATE_PASS.equals(appraisalReport.getAppraisalState())){
					productExploitationRecord.setSampleAppraisalEndDate(appraisalReport.getAuditDate());
					if(AppraisalReport.RESULT_FAIL.equals(appraisalReport.getAppraisalResult())){
						if(applyState == null){
							applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SAMPLEFAIL;
						}
						productExploitationRecord.setSampleAppraisalResult(AppraisalReport.RESULT_FAIL);
					}else{
						if(applyState == null){
							applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SAMPLEPASS;
						}
						productExploitationRecord.setSampleAppraisalResult(AppraisalReport.RESULT_PASS);
					}
				}else if(AppraisalReport.STATE_FAIL.equals(appraisalReport.getAppraisalState())){
					productExploitationRecord.setSampleAppraisalEndDate(appraisalReport.getAuditDate());
					if(applyState == null){
						applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SAMPLEFAIL;
					}
					productExploitationRecord.setSampleAppraisalResult(AppraisalReport.RESULT_FAIL);
				}else{
					if(applyState == null){
						applyState = SupplyProduct.APPLYSTATE_APPRAISAL_SAMPLE;
					}
					productExploitationRecord.setSampleAppraisalResult(null);
				}
				if(exploitationPhase==null){
					exploitationPhase = ProductExploitationRecord.PHASE_APPRAISAL_SAMPLE;
				}
			}
		}
		
		//设置现场考察结果
		String hql = "from InspectionReport i where i.supplier = ? order by i.inspectionDate desc";
		Query query = productExploitationRecordDao.createQuery(hql,supplier);
		query.setMaxResults(1);
		query.setFirstResult(0);
		List<InspectionReport> inspectionReports = query.list();
		if(inspectionReports.isEmpty()){
			 hql = "update ProductExploitationRecord p set p.inspectionStartDate = null,p.inspectionEndDate=null," +
					"p.inspectionResult=null,p.inspectionReportId=null where p.supplier = ?";
			 if(productExploitationRecord.getId() != null){
				 hql += " and p.id <> ?";
				 productExploitationRecordDao.createQuery(hql,supplier,productExploitationRecord.getId()).executeUpdate();
			 }else{
				 productExploitationRecordDao.createQuery(hql,supplier).executeUpdate();
			 }
			if(applyState == null){
				if(productExploitationRecord.getId() != null){
					productExploitationRecordDao.delete(productExploitationRecord);
				}
			}else{
				 productExploitationRecord.setExploitationPhase(exploitationPhase);
				 productExploitationRecord.setApplyState(applyState);
				 productExploitationRecordDao.save(productExploitationRecord);
			}
		}else{
			if(applyState == null){
				productExploitationRecord.setCode(null);
				productExploitationRecord.setName(null);
				productExploitationRecord.setImportance(null);
				productExploitationRecord.setMaterialType(null);
				productExploitationRecord.setRemark(null);
			}
			if(exploitationPhase==null){
				exploitationPhase = ProductExploitationRecord.PHASE_INSPECT;
			}
			productExploitationRecord.setExploitationPhase(exploitationPhase);
			InspectionReport inspectionReport = inspectionReports.get(0);
			productExploitationRecord.setInspectionStartDate(inspectionReport.getInspectionDate());
			productExploitationRecord.setInspectionReportId(inspectionReport.getId());
			if(InspectionReport.STATE_PASS.equals(inspectionReport.getInspectionState())){
				productExploitationRecord.setInspectionEndDate(inspectionReport.getAuditDate());
				if(InspectionReport.RESULT_FAIL.equals(inspectionReport.getInspectionResult())){
					if(applyState == null){
						applyState = SupplyProduct.APPLYSTATE_INSPECTFAIL;
					}
					productExploitationRecord.setInspectionResult(InspectionReport.RESULT_FAIL);
				}else{
					if(applyState == null){
						applyState = SupplyProduct.APPLYSTATE_INSPECTPASS;
					}
					productExploitationRecord.setInspectionResult(InspectionReport.RESULT_PASS);
				}
			}else if(InspectionReport.STATE_FAIL.equals(inspectionReport.getInspectionState())){
				productExploitationRecord.setInspectionEndDate(inspectionReport.getAuditDate());
				if(applyState == null){
					applyState = SupplyProduct.APPLYSTATE_INSPECTFAIL;
				}
				productExploitationRecord.setInspectionResult(InspectionReport.RESULT_FAIL);
			}else{
				if(applyState == null){
					applyState = SupplyProduct.APPLYSTATE_INSPECT;
				}
				productExploitationRecord.setInspectionResult(null);
			}
			if(productExploitationRecord.getCode()==null){//如果仅有供应商,则检查供应商是否还有其他的开发记录
				hql = "from ProductExploitationRecord p where p.supplier = ?";
				List<ProductExploitationRecord> productExploitationRecords = null;
				if(productExploitationRecord.getId() == null){
					productExploitationRecords = productExploitationRecordDao.createQuery(hql,supplier).list();
				}else{
					hql += " and p.id <> ?";
					productExploitationRecords = productExploitationRecordDao.createQuery(hql,supplier,productExploitationRecord.getId()).list();
				}
				if(productExploitationRecords.isEmpty()){
					 productExploitationRecord.setApplyState(applyState);
					 productExploitationRecordDao.save(productExploitationRecord);
				}else{
					if(productExploitationRecord.getId() != null){
						productExploitationRecordDao.delete(productExploitationRecord);
					}
					for(ProductExploitationRecord productExploitationRecord2 : productExploitationRecords){
						productExploitationRecord2.setInspectionEndDate(productExploitationRecord.getInspectionEndDate());
						productExploitationRecord2.setInspectionStartDate(productExploitationRecord.getInspectionStartDate());
						productExploitationRecord2.setInspectionResult(productExploitationRecord.getInspectionResult());
						productExploitationRecordDao.save(productExploitationRecord2);
					}
				}
			}else{
				productExploitationRecord.setApplyState(applyState);
				productExploitationRecordDao.save(productExploitationRecord);
				//更新供应商的其他物料开发记录
				hql = "from ProductExploitationRecord p where p.supplier = ?";
				List<ProductExploitationRecord> productExploitationRecords = null;
				if(productExploitationRecord.getId() == null){
					productExploitationRecords = productExploitationRecordDao.createQuery(hql,supplier).list();
				}else{
					hql += " and p.id <> ?";
					productExploitationRecords = productExploitationRecordDao.createQuery(hql,supplier,productExploitationRecord.getId()).list();
				}
				for(ProductExploitationRecord productExploitationRecord2 : productExploitationRecords){
					productExploitationRecord2.setInspectionEndDate(productExploitationRecord.getInspectionEndDate());
					productExploitationRecord2.setInspectionStartDate(productExploitationRecord.getInspectionStartDate());
					productExploitationRecord2.setInspectionResult(productExploitationRecord.getInspectionResult());
					productExploitationRecordDao.save(productExploitationRecord2);
				}
			}
		}
	}
	
	/**
	  * 方法名: 让步通过指定的开发记录
	  * <p>功能说明：让步通过指定的开发记录</p>
	  * @param productExploitationId
	 */
	public String concessionPass(ProductExploitationRecord record){
		if(ProductExploitationRecord.PHASE_APPRAISAL_SAMPLE.equals(record.getExploitationPhase())){
			if(!SupplyProduct.APPLYSTATE_APPRAISAL_SAMPLEFAIL.equals(record.getApplyState())){
				return "产品申请状态为【"+record.getApplyState()+"】,不能让步通过!";
			}
			AppraisalReport report = appraisalReportDao.get(record.getSampleAppraisalId());
			if(report==null){
				return "找不到样件鉴定指定的表单!";
			}
			report.setIsConcessionPass(true);
			report.setConcessionPassMan(ContextUtils.getUserName());
			appraisalReportDao.save(report);
			updateApplyStateBySupplierAndProductBom(report.getSupplier(),report.getBomCodes());
		}else if(record.getExploitationPhase().endsWith("小批鉴定")){
			if(!SupplyProduct.APPLYSTATE_APPRAISAL_SUBLOTSFAIL.equals(record.getApplyState())){
				return "产品申请状态为【"+record.getApplyState()+"】,不能让步通过!";
			}
			Long appraisalReportId = null;
			if(record.getThirdBatchId() != null){
				appraisalReportId = record.getThirdBatchId();
			}else if(record.getSecondBatchId() != null){
				appraisalReportId = record.getSecondBatchId();
			}else if(record.getFirstBatchId() != null){
				appraisalReportId = record.getFirstBatchId();
			}
			if(appraisalReportId == null){
				return "找不到小批鉴定对应的表单!";
			}
			AppraisalReport report = appraisalReportDao.get(appraisalReportId);
			if(report==null){
				return "找不到小批鉴定指定的表单!";
			}
			report.setIsConcessionPass(true);
			report.setConcessionPassMan(ContextUtils.getUserName());
			appraisalReportDao.save(report);
			updateApplyStateBySupplierAndProductBom(report.getSupplier(),report.getBomCodes());
		}else{
			return "只能对样件鉴定不合格和小批鉴定不合格让步通过!";
		}
		return "";
	}
}
